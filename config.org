* 默认折叠代码

#+OPTIONS: num:nil \n:t ;; 导出文档时是否显示章节编号
#+STARTUP: nofold ;; 打开文档时是否折叠大纲
#+STARTUP: hideblocks ;; 打开文档时是否隐藏代码块

* 打开配置文件

C-c I

#+begin_src emacs-lisp
  (defun find-config ()
    "Edit config.org"
    (interactive)
    (find-file "~/p/emacs/config.org"))
  (global-set-key (kbd "C-c I") 'find-config)
#+end_src

* 重新加载配置

C-c R

#+begin_src emacs-lisp
  (defun reload-config ()
    "Reload config"
    (interactive)
    (delete-file "~/p/emacs/config.el")
    (org-babel-load-file (expand-file-name "~/p/emacs/config.org")))
  (global-set-key (kbd "C-c R") 'reload-config)
#+end_src

* 包管理

emacs 29 已经集成了 use-package
#+begin_src emacs-lisp
  ;; (use-package avy)
  ;; (use-package avy :ensure t)
#+end_src

缺点: 不够灵活, 只能安装指定源的固定版本的包

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  ;;; Integration with use-package
  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
  (setq straight-vc-git-default-clone-depth 1)

  (use-package beacon
    :straight t)
#+end_src

* 主题
#+begin_src emacs-lisp
  (use-package kaolin-themes
    :straight t)
#+end_src

* 切换主题
#+begin_src emacs-lisp
  (setq-default custom-enabled-themes '(kaolin-light))

  (defun reapply-themes ()
    "Forcibly load the themes listed in `custom-enabled-themes'."
    (dolist (theme custom-enabled-themes)
      (unless (custom-theme-p theme)
	(disable-theme theme)
	(load-theme theme)))
    (custom-set-variables `(custom-enabled-themes (quote , custom-enabled-themes))))

  (add-hook 'after-init-hook 'reapply-themes)

  (defun theme-light ()
    "Activate a light color theme."
    (interactive)
    (setq custom-enabled-themes '(kaolin-light))
    (reapply-themes))

  (defun theme-dark ()
    "Activate a dark color theme."
    (interactive)
    (setq custom-enabled-themes '(kaolin-dark))
    (reapply-themes))
#+end_src

* 设置专门的 cutstom.el 来存放生成的配置文件

让自动生成的配置放到专门的配置文件中, 防止污染 init.el

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

* 使用 y or n 来回答

默认是 yes or no 来表示 确认/取消.

#+begin_src emacs-lisp
  (setq-default use-short-answers t)
#+end_src

注意较老版本 emacs, 是 `(defalias 'yes-or-no-p 'y-or-n-p)`

这也是用例文档驱动的好处, 需求是不变的, 但是实现(配置代码)会变.

* 不要生成备份文件

emacs 会生成 #xxx# 和 xxx~ 这样的历史备份文件

一般的本地版本控制和 undo 机制已经足够

#+begin_src emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
  (setq backup-inhibited t)
  (setq backup-directory-alist `(("." . "~/.cache/.saves")))
#+end_src

* 精简 UI, 扩大可视面积

不要工具栏, 不要滚动条, 不要菜单栏

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

* 自动恢复 buffer

现代化的文本编辑器在检测到文件因为别的原因被修改时都会进行同步.

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

* 当退出时, 更友好的提示未保存的文件

#+begin_src emacs-lisp
  (defun clean-exit ()
    "Exit Emacs cleanly. If there are unsaved buffer, pop up a list for them to be saved before existing.
  Replaces 'save-buffers-kill-terminal'."
    (interactive)
    (if (frame-parameter nil 'client)
	(server-save-buffers-kill-terminal arg)
      (if-let ((buf-list (seq-filter (lambda (buf)
				       (and (buffer-modified-p buf)
					    (buffer-file-name buf)))
				     (buffer-list))))
	  (progn
	    (pop-to-buffer (list-buffers-noselect t buf-list))
	    (message "s to save, C-k to kill, x to execute"))
	(save-buffers-kill-emacs))))

  (global-set-key (kbd "C-x C-c") 'clean-exit)
#+end_src
