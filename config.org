* 默认折叠代码

#+OPTIONS: num:nil \n:t ;; 导出文档时是否显示章节编号
#+STARTUP: nofold ;; 打开文档时是否折叠大纲
#+STARTUP: hideblocks ;; 打开文档时是否隐藏代码块

* 打开配置文件

C-c I

#+begin_src emacs-lisp
  (defun find-config ()
    "Edit config.org"
    (interactive)
    (find-file "~/p/emacs/config.org"))
  (global-set-key (kbd "C-c I") 'find-config)
#+end_src

* 重新加载配置

C-c R

#+begin_src emacs-lisp
  (defun reload-config ()
    "Reload config"
    (interactive)
    (delete-file "~/p/emacs/config.el")
    (org-babel-load-file (expand-file-name "~/p/emacs/config.org")))
  (global-set-key (kbd "C-c R") 'reload-config)
#+end_src

* 包管理

emacs 29 已经集成了 use-package
#+begin_src emacs-lisp
  ;; (use-package avy)
  ;; (use-package avy :ensure t)
#+end_src

缺点: 不够灵活, 只能安装指定源的固定版本的包

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  ;;; Integration with use-package
  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
  (setq straight-vc-git-default-clone-depth 1)

  (use-package beacon
    :straight t)
#+end_src

* 主题
#+begin_src emacs-lisp
  (use-package kaolin-themes
    :straight t)
#+end_src

* 切换主题
#+begin_src emacs-lisp
  (setq-default custom-enabled-themes '(kaolin-galaxy))

  (defun reapply-themes ()
    "Forcibly load the themes listed in `custom-enabled-themes'."
    (dolist (theme custom-enabled-themes)
      (unless (custom-theme-p theme)
	(disable-theme theme)
	(load-theme theme)))
    (custom-set-variables `(custom-enabled-themes (quote , custom-enabled-themes))))

  (add-hook 'after-init-hook 'reapply-themes)

  (defun theme-light ()
    "Activate a light color theme."
    (interactive)
    (setq custom-enabled-themes '(kaolin-light))
    (reapply-themes))

  (defun theme-dark ()
    "Activate a dark color theme."
    (interactive)
    (setq custom-enabled-themes '(kaolin-galaxy))
    (reapply-themes))
#+end_src

* 设置专门的 cutstom.el 来存放生成的配置文件

让自动生成的配置放到专门的配置文件中, 防止污染 init.el

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

* 使用 y or n 来回答

默认是 yes or no 来表示 确认/取消.

#+begin_src emacs-lisp
  (setq-default use-short-answers t)
#+end_src

注意较老版本 emacs, 是 `(defalias 'yes-or-no-p 'y-or-n-p)`

这也是用例文档驱动的好处, 需求是不变的, 但是实现(配置代码)会变.

* 不要生成备份文件

emacs 会生成 #xxx# 和 xxx~ 这样的历史备份文件

一般的本地版本控制和 undo 机制已经足够

#+begin_src emacs-lisp
  (setq make-backup-file nil)
  (setq auto-save-default nil)
  (setq backup-inhibited t)
  (setq backup-directory-alist `(("." . "~/.cache/.saves")))
#+end_src

* 精简 UI, 扩大可视面积

不要工具栏, 不要滚动条, 不要菜单栏

#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

* 自动恢复 buffer

现代化的文本编辑器在检测到文件因为别的原因被修改时都会进行同步.

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

* 当退出时, 更友好的提示未保存的文件

#+begin_src emacs-lisp
  (defun clean-exit ()
    "Exit Emacs cleanly. If there are unsaved buffer, pop up a list for them to be saved before existing.
  Replaces 'save-buffers-kill-terminal'."
    (interactive)
    (if (frame-parameter nil 'client)
	(server-save-buffers-kill-terminal arg)
      (if-let ((buf-list (seq-filter (lambda (buf)
				       (and (buffer-modified-p buf)
					    (buffer-file-name buf)))
				     (buffer-list))))
	  (progn
	    (pop-to-buffer (list-buffers-noselect t buf-list))
	    (message "s to save, C-k to kill, x to execute"))
	(save-buffers-kill-emacs))))

  (global-set-key (kbd "C-x C-c") 'clean-exit)
#+end_src

* 打开文件
** 选定文件并打开
|-----------+-------------------------------------|
| C-x C-f   | 当前窗口打开文件                       |
| C-x 4 f   | 在其他窗口打开文件                     |
| C-x 4 C-o | 在其他窗口显示一个 buffer              |
| C-x 4 b   | 切换另一个窗口的 buffer 并且激活那个窗口 |
| C-x 5 f   | 在新 frame 中打开文件                  |
| C-x C-r   | 在当前窗口以只读形式打开文件             |
| C-x 4 r   | 在其他窗口以只读形式打开文件             |

** 快速打开特定文件
使用 ~C-x r m~ 把当前文件设置为书签，之后就能使用 ~C-x r b~ 跳转到该书签。

临时记录特定文件可以使用 ~C-x r space~ 来将当前位置保存到指定寄存器中，之后使用 ~C-x r j~ 跳到指定寄存器所在的位置，注意关闭 emacs 后记录会消失。

* 保存文件

|---------+--------------|
| C-x C-s | 保存当前文件 |
| C-x s   | 保存所有文件 |

* 在新的 frame 中打开待办事项列表文件

#+begin_src emacs-lisp
  (defun find-todo-list()
    "Open todo.org in other frame"
    (interactive)
    (if (not (equal (buffer-file-name) (file-truename "~/e/todo.org")))
	(find-file-other-frame "~/e/todo.org")))

  (global-set-key (kbd "C-c t") 'find-todo-list)
#+end_src

* 打开(长)文件并左右分屏显示并启用 follow mode

#+begin_src emacs-lisp
  (defun find-file-side-by-side()
    "Open file side by side with follow mode enabled"
    (interactive)
    (setq filename (read-file-name "Choose a file: "))
    (message "Selected file: %s" filename)
    (find-file filename)
    (split-window-horizontally)
    (follow-mode))

  (global-set-key (kbd "C-c s") 'find-file-side-by-side)
#+end_src

* 打开并监控 zsh shell 的操作历史

#+begin_src emacs-lisp
  (defun tail-zsh-history()
    "tail zsh history log"
    (interactive)
    (find-file "~/.local/state/zsh/.histfile")
    (end-of-buffer)
    (auto-revert-tail-mode))
#+end_src

* 打开 buffer 内容中指向的文件
~find-file-at-point~
e.g ~/.local/state/zsh/.histfile

* 打开剪切板的内容并将其作为路径

#+begin_src emacs-lisp
  (defun find-file-at-clipboard()
    "Find file at clipboard path."
    (interactive)
    (with-temp-buffer
      (clipboard-yank)
      (find-file-at-point)))

  (global-set-key (kbd "C-c f") 'find-file-at-clipboard)
#+end_src

* 全局设置自动保存

#+begin_src emacs-lisp
  (auto-save-visited-mode)
#+end_src

* 切换窗口
** 切换到指定窗口

~M-o~ 然后按下窗口左上角显示的对应字母 (a r s t d t h n e i o)
#+begin_src emacs-lisp
  (use-package ace-window
    :config
    (setq aw-keys '(?a ?r ?s ?t ?d ?h ?n ?e ?i ?o))
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 2.0)))))
    :bind
    ("M-o" . ace-window))
#+end_src

** 恢复窗口布局

~C-c <left-arrow> <right-arrow>~ 来恢复撤销之前的窗口布局

#+begin_src emacs-lisp
  (use-package winner-mode
    :straight nil
    :hook
    (after-init . winner-mode))
#+end_src

*** 重启后恢复

#+begin_src
  (desktop-save-mode 1)
#+end_src

* Buffer 中移动光标

| C-b | 左移字符 |
| C-f | 右移字符 |

| M-b | 左移单词 |
| M-f | 右移单词 |

| C-a | 移动到行首 |
| C-e | 移动到行尾 |
| C-n | 移动下一行 |
| C-p | 移动上一行 |

| M-<   | 移动到 buffer 头部    |
| M->   | 移动到 buffer 尾部    |
| M-g g | 移动到 buffer 中指定行 |
| C-v   | 向下滚动              |
| M-v   | 向上滚动              |

| C-M-v   | 其他 buffer 向上滚动 |
| C-M-S-v | 其他 buffer 向下滚动 |

| C-s | 向下搜索 |
| C-r | 向上搜索 |

* 设置标记

| C-SPC       | 然后移动光标    |
| shift + 移动 | 自动 mark      |
| C-x         | 选定整个 buffer |

* 编辑内容
+ 直接输入内容
+ 快速输入内容
+ 矩形编辑
+ 输入 emoji

** 快速输入内容
*** Abbrev
选中要用作扩展的词，然后键入 C-x a g以及它的缩写

然后之后输入缩写, 在缩写之后 键入 C-x a ' 自动扩展
#+begin_src emacs-lisp
  (setq abbrev-file-name (expand-file-name "abbrev_defs" user-emacs-directory))
  (setq save-abbrevs 'silently) ;; save abbrevs when file are saved
#+end_src

*** Dynamic Abbrev

~M+/~ 输入部分, emacs 会根据 buffer 已有的内容自动补全一个单词

** 矩形编辑

~C-x SPC~ 把 region 转换为 Rectangles ~C-x r t~ 替换矩形文本

hello world
hello world
hello world

** 输入 Emoji

~C-x 8 C-h~
~C-x 8 RET~
👨
